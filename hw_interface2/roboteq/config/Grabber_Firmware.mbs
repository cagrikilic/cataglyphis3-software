' WVU SRRC Challenge - Capture Device Firmware
' Alexander T. Hypes
' Lisa Kogan
' Version 23 - 3/7/16
' Status: Verified
	
	' Serial Communication Commands:
		' Var 1 - Slider movement completion		(0: go / incomplete 	1: stop / complete)
		' Var 2 - Slider desired position			(closed: -1000, open: +1000)
		' Var 3 - Raise/lower movement completion	(0: go / incomplete 	1: stop / complete)
		' Var 4 - Raise/lower desired position		(up: 	 -1000, down: +1000)
	
	' Packet Output Format:
			' [1:3]		Az5 		header														(uint8)x3
			' [4]		mux 		mux'd byte for scomp/rcomp/errstatus/ticker 				(uint8)
										' bit[8] 		= scomp		(MSB)
										' bit[7] 		= rcomp
										' bit[6] 		= errstatus
										' bit[5:1] 		= ticker 	(LSB+4)  (0-31 counter)
										
			' [5:6]		clock		clock					(uint16) (time since boot in sec, rolls over at ~18 hrs)
			' [7]		spos_avg 	((spos_avg)/8 + 1)		(uint8)
			' [8]   	bvolt		battery_volts			(uint8)   (battery voltage*5)
			' [9]   	amp1		motor1 amps				(uint8)   (motor amps*12 + 128)
			' [10]   	amp2		motor2 amps				(uint8)
			' [11]   	amp3		motor3 amps				(uint8)
			' [12]		pos3 		((pos3)/8 + 1)			(uint8)
			' [13-16]	crc32 		crc32 check 			(uint8)x4 (crc32 of [1:12])
			' [17]		crc32i		inv crc32 byte			(uint8)	  (markers for crc32 bits to invert)			
	
	' << script configuration settings >>
	wait(500)						' pause before script execution
	wait_val =        16			' target time between packets (ms) (never send faster than this)
	wamp =			  70			' working amp limit (*10)
	wvolt =		     140 			' working voltage (*10)
	amp_thres =		  70			' percentage of wamp to be considered /stalled/ (*100)
	maxpwr = 		1000 			' movement command cap

	ana_tol =		  20			' move completion tolerance
	kmov =			 120  			' proportional gain for overall slider movement control (*10)
	amov =			  50			' proportional gain for differential slider control based on amp draw (*10)
	kdiff =			  80 			' proportional gain for differential slider control based on position (*10)
	kup =			  80  			' proportional gain for overall raise/lower movement control (*10)
	
	stimeout =	   10000			' slider timeout (ms)
	rtimeout =	   10000			' raise/lower timeout (ms)
	stalltime =	    2000			' stall time before stopping and sending errorstatus (ms)
	afactorw =        15			' accelleration factor
	crc_poly = 0xEDB88320 		' crc32 polynomial (note stored as int32: actually a uint32)
	
	' << misc init >> 
	amp1 = 		  0
	amp2 = 		  0
	amp3 = 		  0
	
	' zero movement commands		
	pwr1 = 0
	pwr2 = 0
	pwr3 = 0	
	
	' normalize max voltage out
	bvolt = getvalue(_V, 2) 		' get battery voltage (*10)
	if bvolt < 0 then			
		bvolt = 420					' 42V if value is corrupted
	elseif bvolt > 420 then 
		bvolt = 420
	end if
	
	spwr = wvolt * 100 / bvolt 		' calc power percentage (*10)
	if (spwr<50)  then spwr=50 		' bound power values
	if (spwr>100) then spwr=100

	
	i = 0 							' print throttle counter
	j = 0 							' acceleration factor throttle counter
	ticker = 0 						' packet counter
	errstatus = 0 					' error status code
	afactor = afactorw				' init afactor counter
	
	pos1 = getvalue(_FEEDBK,1) 		' get current slider positions
	pos2 = getvalue(_FEEDBK,2)
	pos3 = getvalue(_FEEDBK,3)
	gosub sanitize_s				' Bugfix: sanitize feedback/amp measurements
	gosub sanitize_r				' Bugfix: sanitize feedback/amp measurements
	' << push controller settings >> 
	setconfig(_ECHOF, 1)			' disable serial echo
	
	' motor setup
	setconfig(_MMOD, 1, 0) 			' switch to open loop
	setconfig(_MMOD, 2, 0)
	setconfig(_MMOD, 3, 0)	
	setcommand(_GO, 1, 0) 			' issue zero speed command
	setcommand(_GO, 2, 0)
	setcommand(_GO, 3, 0)	
	setconfig(_ALIM, 1, wamp) 		' set amp limits
	setconfig(_ALIM, 2, wamp)
	setconfig(_ALIM, 3, wamp)
	
	' output voltage (pwr)
	setconfig(_MXPF, 1, spwr) 		' set max fwd power levels
	setconfig(_MXPF, 2, spwr)
	setconfig(_MXPF, 3, spwr)
	setconfig(_MXPR, 1, spwr) 		' set max rev power levels
	setconfig(_MXPR, 2, spwr)
	setconfig(_MXPR, 3, spwr)
	
	' variable init
	setcommand(_VAR, 1, 1) 			' init move completions true
	setcommand(_VAR, 3, 1)
	setcommand(_VAR, 2, 0) 			' init commanded positions to zero
	setcommand(_VAR, 4, 0)
	
	' configure analog inputs
	setconfig(_AINA, 1,  0) 		' disable
	setconfig(_AINA, 2, 66) 		' feedback for motor 1
	setconfig(_AINA, 3, 34) 		' feedback for motor 2
	setconfig(_AINA, 4, 18)			' feedback for motor 3
	setconfig(_AINA, 5,  0) 		' disable
	setconfig(_AINA, 6,  0) 		' disable
	setconfig(_AINA, 7,  0) 		' disable
	setconfig(_AINA, 8,  0) 		' disable
	
	setconfig(_DFC, 1, -1000)		' chan 1 default cmd value
	setconfig(_DFC, 2, -1000)		' chan 2 default cmd value
	setconfig(_DFC, 3, -1000)		' chan 3 default cmd value	
	
	' setup hw timers
	settimercount(0, wait_val) 		' setup packet timer	
	settimercount(1, stimeout)  	' setup slider timer
	settimercount(2, rtimeout) 		' setup raise/lower timer
	settimercount(3, stalltime) 	' setup slider timer	
	settimerstate(0, 0) 			' make sure packet timer is running
	
	' << main loop >>
	while 1
		' read serial variables
		scomp = getvalue(_VAR,1) 			' get slider completion value
		scmd  = getvalue(_VAR,2) 			' get desired slider position
		rcomp = getvalue(_VAR,3) 			' get raise/lower completion value
		rcmd  = getvalue(_VAR,4) 			' get desired raise/lower position
			
		gosub sanitize 						' sanitize input vars to safe values

		gosub smove							' calc slider move pwr
		
		gosub rmove							' calc raise/lower pwr
		
		gosub scheck						' slider completion check
		
		gosub rcheck						' raise/lower completion check

		' drive motors
		setcommand(_GO, 1, -pwr1) 			' negative due to grabber closing outward
		setcommand(_GO, 2, -pwr2) 			' (the grabber moves away from robot to close)
		setcommand(_GO, 3,  pwr3)	
	
		' print throttling
		if (gettimercount(0) < 1) then		' timer has run out?

			bvolt = getvalue(_V, 2)*5/10 	' get battery voltage (*5)
			if bvolt < 0 then
				bvolt = 0
			elseif bvolt > 254
				bvolt = 254
			end if

			clk_sec  = getvalue(_TM, 1)		' BUGFIX: v1.5 firmware does _TM differently
			clk_min  = getvalue(_TM, 2)		' time since boot (min)
			clk_hr   = getvalue(_TM, 3)		' time since boot (hrs)
			clk = clk_sec + clk_min*60 + clk_hr*3600
			
			amp1p = (amp1*12/10 + 128)		' read measured amp draws
			amp2p = (amp2*12/10 + 128)
			amp3p = (amp3*12/10 + 128)
			
			gosub serialize_i				' serialize clock + build bytes
			
			gosub crc32						' calculate crc32
			
			'gosub crc32_noop				' blank crc32 (noop)
			
			gosub crc32_ichk				' check/calc bytes to invert for crc32
			
			gosub packetprinter				' write packet to serial
			
			settimercount(0, wait_val) 		' reset packet timer
			settimerstate(0, 0) 			' make sure timer is running
		else
			wait(1)
		end if	
			
	end while
	

	' << crc32 inversion check/calc >> 
	crc32_ichk:
		byte17 = 128
		if byte13=0 then byte17=byte17+1
		if byte14=0 then byte17=byte17+2
		if byte15=0 then byte17=byte17+4
		if byte16=0 then byte17=byte17+8
		
		if byte13=0 then byte13=255
		if byte14=0 then byte14=255
		if byte15=0 then byte15=255
		if byte16=0 then byte16=255

	return
		
	
	' << crc32 calculation >> 
	crc32:
		' http://www.mathworks.com/matlabcentral/fileexchange/49518-crc-32-computation-algorithm/content/crc32.m
		crc_val  = 0xFFFFFFFF		' starting value of crc32
		
		val = byte4					' [4]		mux 		(uint8)
		gosub crc32_bitbang
		val = byte5					' [5:6]		clock 		(uint16)
		gosub crc32_bitbang
		val = byte6
		gosub crc32_bitbang
		val = byte7					' [7]		spos_avg 	(uint8)
		gosub crc32_bitbang
		val = byte8					' [8]		bvolts		(uint8)
		gosub crc32_bitbang
		val = byte9					' [9]		amp1		(uint8)
		gosub crc32_bitbang
		val = byte10				' [10]		amp2		(uint8)
		gosub crc32_bitbang
		val = byte11				' [11]		amp3		(uint8)
		gosub crc32_bitbang
		val = byte12				' [12]		pos3		(uint8)
		gosub crc32_bitbang		
		
		' final complement of crc32
		crc_val = crc_val xor 0xFFFFFFFF 	' 24 	crc = bitcmp(crc);
		
		' serialize crc32 into 4 bytes
		byte13  =   ( crc_val        and 0b11111111)
		byte14  =   ((crc_val >>  8) and 0b11111111)
		byte15  =   ((crc_val >> 16) and 0b11111111)
		byte16  =   ((crc_val >> 24) and 0b11111111)
	return		

	' << dummy crc32 func for speed testing
	crc32_noop:
		byte13  =   0x0
		byte14  =   0x1
		byte15  =   0x2
		byte16  =   0x3
	return	
	
	' << crc32 bitwise magic >> 
	crc32_bitbang:
		' http://www.mathworks.com/matlabcentral/fileexchange/49518-crc-32-computation-algorithm/content/crc32.m
		crc_val = (crc_val xor val)						' 13 crc = bitxor(crc,uint32(data_(i)));
		gosub crc32_base								' 14 for j = 1:8
		gosub crc32_base
		gosub crc32_base
		gosub crc32_base
		gosub crc32_base
		gosub crc32_base
		gosub crc32_base
		gosub crc32_base								' 22 end
	return

	' << crc32 base operation (per bit) >>
	crc32_base:
		mask = ((crc_val and 0x00000001) xor 0xFFFFFFFF) 	' 15 	mask = bitcmp(bitand(crc,uint32(1)));
		if (mask = 0xFFFFFFFF)								' 16	if mask == intmax('uint32')
			mask = 0										' 17		mask = 0;
		else												' 18	else
			'mask = mask + 1								' 19		mask = mask+1;
			m_one = 0x00000001
			gosub bit_add 										' bitwise addition (!as uint32!) m_one to mask
		end if												' 20	end
		crc_val = ((crc_val >> 1) xor (crc_poly and mask))	' 21	crc = bitxor(bitshift(crc,-1),bitand(poly,mask));
	return
	
	' << bitwise addition (as uint32) >>
	bit_add:
		' http://www.geeksforgeeks.org/add-two-numbers-without-using-arithmetic-operators/
		' bitwise addition of mask and m_one
		while (m_one <> 0)
			carry = (mask and m_one)
			mask = (mask xor m_one)
			m_one = (carry << 1)
		end while
    return	
		
	' << sanitize serial input var values >>
	sanitize:
		if scomp < 0 then scomp = 0							' keep scomp (Var 1) between 0 and 1
		if scomp > 1 then scomp = 1

		if scmd < -1000 then scmd = -1000					' keep scmd  (Var 2) between -1000 and +1000
		if scmd >  1000 then scmd =  1000		
		
		if rcomp < 0 then rcomp = 0							' keep rcomp (Var 3) between 0 and 1
		if rcomp > 1 then rcomp = 1		

		if rcmd < -1000 then rcmd = -1000					' keep rcmd  (Var 4) between -1000 and +1000
		if rcmd >  1000 then rcmd =  1000		
			
	return

	' << slider movement command calculation >>
	smove:
		if (scomp = 0) then    								' move not complete?
			settimerstate(1, 0) 							' make sure movement timer is running
			pos1 = getvalue(_FEEDBK,1) 						' get current slider positions
			pos2 = getvalue(_FEEDBK,2)
	
			amp1 = getvalue(_A, 1) 							' read measured amp draws
			amp2 = getvalue(_A, 2)
			gosub sanitize_s								' Bugfix: sanitize feedback/amp measurements
			
			errstatus = 0 									' clear failed grab message for new movements
						
			' << stall / failure detection >>
			if (abs(amp1) > (wamp * amp_thres/100)) or (abs(amp2) > (wamp * amp_thres/100)) then
															' is one channel is above wamp * amp_thres?
				settimerstate(3, 0) 						' make sure stall timer is running
				
				if (gettimercount(3) < 1) then				' timer has run out?
				
					'grab failed (change status)
					settimercount(1, stimeout)  			' reset slider timer
					settimerstate(1, 1) 					' stop slider timer
					
					settimercount(3, stalltime) 			' reset stall timer
					settimerstate(3, 1) 					' stop stall timer						
								
					setcommand(_VAR,1,1) 					' change move flag to complete (stop sliders)
					errstatus = 1 							' mark grab as failed/stalled grab
					
				else										' do nothing, could just be a spike
				
					'print(gettimercount(3), " \n")			' print timer while its running
				end if
			else
				settimercount(3, stalltime) 				' Bugfix: reset stall timer
				settimerstate(3, 1)							' stop stall timer
			end if		
			
			' << not stalled / command calculation >>
			pwr1 = (scmd - pos1) * kmov/10 					' calc raw pwr values
			pwr2 = (scmd - pos2) * kmov/10
			
			gosub power_calc_s								' cap pwr values

			' acceleration factor throttling code
			j = j + 1										' increment acceleration throttling counter
			if j>4 then										' every fourth loop
				if afactor < 2 then							
					afactor = 1								' dont' go below 1
				else
					afactor = afactor - 1					' reduce by one
				end if
				j=0											' reset acceleration throttling counter
			end if		

			if ((pos1-pos2) * pwr1) > 0 then step1=1 else step1=0 		' step /function/ var
			if ((pos2-pos1) * pwr2) > 0 then step2=1 else step2=0
			
			pwr1 = pwr1 - step1*((pos1-pos2)*kdiff - (amp2*amov))/10 	' calculate base move command
			pwr2 = pwr2 - step2*((pos2-pos1)*kdiff - (amp1*amov))/10
			
			pwr1 = pwr1*(100-100*afactor/afactorw)/100 		' scale pwr values over time
			pwr2 = pwr2*(100-100*afactor/afactorw)/100
		else
			pwr1 = 0										' Bugfix: kill movement / pause detection
			pwr2 = 0
			amp1 = 0
			amp2 = 0
		end if
	return

	' << sanitize slider measurements >>
	sanitize_s:
		if pos1 < -1000 then pos1 = -1000					' keep pos1 feedback between -1000 and +1000
		if pos1 >  1000 then pos1 =  1000			
	
		if pos2 < -1000 then pos2 = -1000					' keep pos2 feedback between -1000 and +1000
		if pos2 >  1000 then pos2 =  1000			
		
		if amp1 < -100 then amp1 = -100						' keep amp1 between +-10 amps
		if amp1 >  100 then amp1 =  100			
		
		if amp2 < -100 then amp2 = -100						' keep amp2 between +-10 amps
		if amp2 >  100 then amp2 =  100			
	return
	
	' << raise/lower movement command calculation >>
	rmove:
		if (rcomp = 0) then									' move not complete?
			settimerstate(2, 0) 							' make sure timer 2	is running
			
			pos3 = getvalue(_FEEDBK,3)						' get current raise/lower positions
			amp3 = getvalue(_A, 3)
			
			gosub sanitize_r								' Bugfix: sanitize feedback measurement
			
			pwr3 = (rcmd-pos3)*kup/10 						' calc raw pwr value
			
			gosub power_calc_ud 							' normalize pwr values
		else
			pwr3 = 0										' Bugfix: kill movement / pause detection
			amp3 = 0
		end if
	return

	' << raise/lower completion check >>
	rcheck:
		if (abs(pos3 - rcmd) < ana_tol) or (gettimercount(2) < 1) then ' are we there yet or is time up?

			settimercount(2, rtimeout) 						' reset r/l movement timer
			settimerstate(2, 1) 							' stop  r/l movement timer
			
			rcomp = 1										' mark move complete
			setcommand(_VAR, 3, rcomp)						' write Var 3 to serial
			
			pwr3 = 0										' set movement cmd to 0
		end if
	return
	
	' << slider completion check >>
	scheck:
		if ((abs(pos1 - scmd) < ana_tol) and (abs(pos2 - scmd) < ana_tol)) or (gettimercount(1) < 1) then
															' are both sliders close or is time up?
															
			settimercount(1, stimeout) 						' reset slider movement timer
			settimerstate(1, 1)								' stop  slider movement timer
			settimercount(3, stalltime)						' reset slider stall timer
			settimerstate(3, 1) 							' stop 	slider stall timer
			
			scomp = 1										' mark move complete
			setcommand(_VAR, 1, scomp) 						' write Var 1 to serial
			
			afactor = afactorw								' reset acceleration factor
			j=0												' reset throttle counter
			
			pwr1 = 0										' set moveement cmds to 0
			pwr2 = 0			
		end if
	return
		
	' << slider power limits >> 
	power_calc_s:											' keep pwr1 and pwr2 within -1000 and +1000
		if pwr1 < -maxpwr then
			pwr1 = -maxpwr
		elseif pwr1 > maxpwr then 
			pwr1 = maxpwr
		end if			
		
		if pwr2 < -maxpwr then
			pwr2 = -maxpwr
		elseif pwr2 > maxpwr then 
			pwr2 = maxpwr
		end if	
	return
	
	' << raise/lower power limits >>
	power_calc_ud:											' keep pwr3 within -1000 and +1000
		if pwr3 < -maxpwr then
			pwr3 = -maxpwr
		elseif pwr3 > maxpwr then 
			pwr3 = maxpwr
		end if			
	return
	
	' << sanitize raise/lower measurements >>
	sanitize_r:
		if pos3 < -1000 then								' keep pos3 feedback between -1000 and +1000
			pos3 = -1000
		elseif pos3 > 1000 then
			pos3 = 1000
		end if
	return	
		
	' << serialize + invert 2 byte values (~uint16) into 1 byte chunks >> 
	serialize_i:
		ticker = (ticker + 1) mod 32											' increment packet counter
		val1 = (scomp*128 + rcomp*64 + errstatus*32 + ticker)					' mux scomp/rcomp/errstatus/ticker
		val2 = ((pos1 + pos2 + 2000)/16)										' update packet slider position avg
		
		val3 = bvolt  mod   256								' bound data to byte values
		val4 = amp1p  mod   256	
		val5 = amp2p  mod   256
		val6 = amp3p  mod   256
		val7 = (pos3+1000)/8								' update packet raise/lower position

		if val3 < 0 then									' bvolts
			val3 = 0
		elseif val3 > 254
			val3 = 254
		end if
		
		if val4 < 0 then									' amp1
			val4 = 0
		elseif val4 > 254
			val4 = 254
		end if
		
		if val5 < 0 then									' amp2
			val5 = 0
		elseif val5 > 254
			val5 = 254
		end if	
		
		if val6 < 0 then									' amp3
			val6 = 0
		elseif val6 > 254
			val6 = 254
		end if	
		
		' mux byte (scomp/rcomp/errstatus/ticker)
		byte4  = 		 ((val1 and 0b11111111) xor 0b11111111)							' mask, invert
		' clock
		byte5  =          ((clk and 0b11111111) xor 0b11111111)
		byte6  =   (((clk >> 8) and 0b11111111) xor 0b11111111) ' shift, mask, invert		
		' pos avg
		byte7  = 		 ((val2 and 0b11111111) xor 0b11111111)	
		
		' bvolts
		byte8  =		 (val3  xor 0b11111111)
		' amp1
		byte9  =		 (val4  xor 0b11111111)
		' amp
		byte10  =		 (val5  xor 0b11111111)
		' amp3
		byte11  =		 (val6  xor 0b11111111)
		' pos3
		byte12  =		 (val7  xor 0b11111111)	
		
		' bvolts
		if byte8=0 then byte8=1
		' amp1
		if byte9=0 then byte9=1
		' amp
		if byte10=0 then byte10=1
		' amp3
		if byte11=0 then byte11=1			
	return		
	
	' << output packet over serial >>
	packetprinter:	
		' print packet
		print("Az5") 			' [1:3]		header				(uint8)x3
		
		val = byte4				' [4]		mux byte			(uint8)
		gosub twiddlebit

		val = byte5				' [5:6]		clock 				(uint16)
		gosub twiddlebit
		val = byte6
		gosub twiddlebit

		val = byte7				' [7]		spos_avg/8 			(uint8)
		gosub twiddlebit		

		val = byte8				' [8]		bvolts				(uint8)
		gosub twiddlebit
		
		val = byte9				' [9]		amp1				(uint8)
		gosub twiddlebit	
		val = byte10			' [10]		amp2				(uint8)
		gosub twiddlebit
		val = byte11			' [11]		amp3				(uint8)
		gosub twiddlebit	
		val = byte12			' [12]		pos3/8				(uint8)
		gosub twiddlebit	
		
		val = byte13			' [13:16]	crc32		(uint32)
		gosub twiddlebit
		val = byte14
		gosub twiddlebit	
		val = byte15
		gosub twiddlebit	
		val = byte16
		gosub twiddlebit
		val = byte17			' [17]		crc32_i		(uint8)
		gosub twiddlebit	
		
		'print("\n")
	return		
	
		' << print val as uint8 char via serial >>
	twiddlebit:												' convert to binary for minimum/consistent runtime
		if (val and 0b00000001)>0 then bit1=1 else bit1=0	' LSB
		if (val and 0b00000010)>0 then bit2=1 else bit2=0
		if (val and 0b00000100)>0 then bit3=1 else bit3=0	' Speedfix: changed division to comparison
		if (val and 0b00001000)>0 then bit4=1 else bit4=0
		if (val and 0b00010000)>0 then bit5=1 else bit5=0
		if (val and 0b00100000)>0 then bit6=1 else bit6=0
		if (val and 0b01000000)>0 then bit7=1 else bit7=0
		if (val and 0b10000000)>0 then bit8=1 else bit8=0 	' MSB
		
		if bit8 then										' begin /binary/ tree
			if bit7 then
				if bit6 then
					if bit5 then
						if bit4 then						'byte value
							if bit3 then
								if bit2 then
									if bit1 then
										print("\xFF") 		'255
									else
										print("\xFE") 		'254
									end if
								else
									if bit1 then
										print("\xFD") 		'253
									else
										print("\xFC") 		'252
									end if
								end if
							else
								if bit2 then
									if bit1 then
										print("\xFB") 		'251
									else
										print("\xFA") 		'250
									end if
								else
									if bit1 then
										print("\xF9") 		'249
									else
										print("\xF8") 		'248
									end if
								end if
							end if
						else
							if bit3 then
								if bit2 then
									if bit1 then
										print("\xF7") 		'247
									else
										print("\xF6") 		'246
									end if
								else
									if bit1 then
										print("\xF5") 		'245
									else
										print("\xF4") 		'244
									end if
								end if
							else
								if bit2 then
									if bit1 then
										print("\xF3") 		'243
									else
										print("\xF2") 		'242
									end if
								else
									if bit1 then
										print("\xF1") 		'241
									else
										print("\xF0") 		'240
									end if
								end if
							end if
						end if
					else
						if bit4 then
							if bit3 then
								if bit2 then
									if bit1 then
										print("\xEF") 		'239
									else
										print("\xEE") 		'238
									end if
								else
									if bit1 then
										print("\xED") 		'237
									else
										print("\xEC") 		'236
									end if
								end if
							else
								if bit2 then
									if bit1 then
										print("\xEB") 		'235
									else
										print("\xEA") 		'234
									end if
								else
									if bit1 then
										print("\xE9") 		'232
									else
										print("\xE8") 		'231
									end if
								end if
							end if
						else
							if bit3 then
								if bit2 then
									if bit1 then
										print("\xE7") 		'230
									else
										print("\xE6") 		'229
									end if
								else
									if bit1 then
										print("\xE5") 		'228
									else
										print("\xE4") 		'227
									end if
								end if
							else
								if bit2 then
									if bit1 then
										print("\xE3") 		'226
									else
										print("\xE2") 		'225
									end if
								else
									if bit1 then
										print("\xE1") 		'224
									else
										print("\xE0") 		'223
									end if
								end if
							end if
						end if
					end if
				else
					if bit5 then
						if bit4 then
							if bit3 then
								if bit2 then
									if bit1 then
										print("\xDF") 		'222
									else
										print("\xDE") 		'221
									end if
								else
									if bit1 then
										print("\xDD") 		'220
									else
										print("\xDC") 		'219
									end if
								end if
							else
								if bit2 then
									if bit1 then
										print("\xDB") 		'218
									else
										print("\xDA") 		'217
									end if
								else
									if bit1 then
										print("\xD9") 		'216
									else
										print("\xD8") 		'215
									end if
								end if
							end if
						else
							if bit3 then
								if bit2 then
									if bit1 then
										print("\xD7") 		'214
									else
										print("\xD6") 		'213
									end if
								else
									if bit1 then
										print("\xD5") 		'212
									else
										print("\xD4") 		'211
									end if
								end if
							else
								if bit2 then
									if bit1 then
										print("\xD3") 		'210
									else
										print("\xD2") 		'209
									end if
								else
									if bit1 then
										print("\xD1") 		'208
									else
										print("\xD0") 		'207
									end if
								end if
							end if
						end if
					else
						if bit4 then
							if bit3 then
								if bit2 then
									if bit1 then
										print("\xCF") 		'206
									else
										print("\xCE") 		'205
									end if
								else
									if bit1 then
										print("\xCD") 		'204
									else
										print("\xCC") 		'203
									end if
								end if
							else
								if bit2 then
									if bit1 then
										print("\xCB") 		'202
									else
										print("\xCA") 		'201
									end if
								else
									if bit1 then
										print("\xC9") 		'200
									else
										print("\xC8") 		'199
									end if
								end if
							end if
						else
							if bit3 then
								if bit2 then
									if bit1 then
										print("\xC7") 		'198
									else
										print("\xC6") 		'197
									end if
								else
									if bit1 then
										print("\xC5") 		'196
									else
										print("\xC4") 		'195
									end if
								end if
							else
								if bit2 then
									if bit1 then
										print("\xC3") 		'194
									else
										print("\xC2") 		'193
									end if
								else
									if bit1 then
										print("\xC1") 		'192
									else
										print("\xC0") 		'191
									end if
								end if
							end if
						end if
					end if
				end if
			else
				if bit6 then
					if bit5 then
						if bit4 then
							if bit3 then
								if bit2 then
									if bit1 then
										print("\xBF") 		'190
									else
										print("\xBE") 		'189
									end if
								else
									if bit1 then
										print("\xBD") 		'188
									else
										print("\xBC") 		'187
									end if
								end if
							else
								if bit2 then
									if bit1 then
										print("\xBB") 		'186
									else
										print("\xBA") 		'185
									end if
								else
									if bit1 then
										print("\xB9") 		'184
									else
										print("\xB8") 		'183
									end if
								end if
							end if
						else
							if bit3 then
								if bit2 then
									if bit1 then
										print("\xB7") 		'182
									else
										print("\xB6") 		'181
									end if
								else
									if bit1 then
										print("\xB5") 		'180
									else
										print("\xB4") 		'179
									end if
								end if
							else
								if bit2 then
									if bit1 then
										print("\xB3") 		'178
									else
										print("\xB2") 		'177
									end if
								else
									if bit1 then
										print("\xB1") 		'176
									else
										print("\xB0") 		'175
									end if
								end if
							end if
						end if
					else
						if bit4 then
							if bit3 then
								if bit2 then
									if bit1 then
										print("\xAF") 		'174
									else
										print("\xAE") 		'173
									end if
								else
									if bit1 then
										print("\xAD") 		'172
									else
										print("\xAC") 		'171
									end if
								end if
							else
								if bit2 then
									if bit1 then
										print("\xAB") 		'170
									else
										print("\xAA") 		'169
									end if
								else
									if bit1 then
										print("\xA9") 		'168
									else
										print("\xA8") 		'167
									end if
								end if
							end if
						else
							if bit3 then
								if bit2 then
									if bit1 then
										print("\xA7") 		'166
									else
										print("\xA6") 		'165
									end if
								else
									if bit1 then
										print("\xA5") 		'164
									else
										print("\xA4") 		'163
									end if
								end if
							else
								if bit2 then
									if bit1 then
										print("\xA3") 		'162
									else
										print("\xA2") 		'161
									end if
								else
									if bit1 then
										print("\xA1") 		'160
									else
										print("\xA0") 		'159
									end if
								end if
							end if
						end if
					end if
				else
					if bit5 then
						if bit4 then
							if bit3 then
								if bit2 then
									if bit1 then
										print("\x9F") 		'158
									else
										print("\x9E") 		'157
									end if
								else
									if bit1 then
										print("\x9D") 		'156
									else
										print("\x9C") 		'155
									end if
								end if
							else
								if bit2 then
									if bit1 then
										print("\x9B") 		'154
									else
										print("\x9A") 		'153
									end if
								else
									if bit1 then
										print("\x99") 		'152
									else
										print("\x98") 		'151
									end if
								end if
							end if
						else
							if bit3 then
								if bit2 then
									if bit1 then
										print("\x97") 		'150
									else
										print("\x96") 		'149
									end if
								else
									if bit1 then
										print("\x95") 		'148
									else
										print("\x94") 		'147
									end if
								end if
							else
								if bit2 then
									if bit1 then
										print("\x93") 		'146
									else
										print("\x92") 		'145
									end if
								else
									if bit1 then
										print("\x91") 		'144
									else
										print("\x90") 		'143
									end if
								end if
							end if
						end if
					else
						if bit4 then
							if bit3 then
								if bit2 then
									if bit1 then
										print("\x8F") 		'142
									else
										print("\x8E") 		'141
									end if
								else
									if bit1 then
										print("\x8D") 		'140
									else
										print("\x8C") 		'139
									end if
								end if
							else
								if bit2 then
									if bit1 then
										print("\x8B") 		'138
									else
										print("\x8A") 		'137
									end if
								else
									if bit1 then
										print("\x89") 		'136
									else
										print("\x88") 		'135
									end if
								end if
							end if
						else
							if bit3 then
								if bit2 then
									if bit1 then
										print("\x87") 		'134
									else
										print("\x86") 		'133
									end if
								else
									if bit1 then
										print("\x85") 		'132
									else
										print("\x84") 		'131
									end if
								end if
							else
								if bit2 then
									if bit1 then
										print("\x83") 		'130
									else
										print("\x82") 		'129
									end if
								else
									if bit1 then
										print("\x81") 		'128
									else
										print("\x80") 		'128
									end if
								end if
							end if
						end if
					end if
				end if
			end if
		else
			if bit7 then
				if bit6 then
					if bit5 then
						if bit4 then
							if bit3 then
								if bit2 then
									if bit1 then
										print("\x7F") 		'127
									else
										print("\x7E") 		'126
									end if
								else
									if bit1 then
										print("\x7D") 		'125
									else
										print("\x7C") 		'124
									end if
								end if
							else
								if bit2 then
									if bit1 then
										print("\x7B") 		'123
									else
										print("\x7A") 		'122
									end if
								else
									if bit1 then
										print("\x79") 		'121
									else
										print("\x78") 		'120
									end if
								end if
							end if
						else
							if bit3 then
								if bit2 then
									if bit1 then
										print("\x77") 		'119
									else
										print("\x76") 		'118
									end if
								else
									if bit1 then
										print("\x75") 		'117
									else
										print("\x74") 		'116
									end if
								end if
							else
								if bit2 then
									if bit1 then
										print("\x73") 		'115
									else
										print("\x72") 		'114
									end if
								else
									if bit1 then
										print("\x71") 		'113
									else
										print("\x70") 		'112
									end if
								end if
							end if
						end if
					else
						if bit4 then
							if bit3 then
								if bit2 then
									if bit1 then
										print("\x6F") 		'111
									else
										print("\x6E") 		'110
									end if
								else
									if bit1 then
										print("\x6D") 		'109
									else
										print("\x6C") 		'108
									end if
								end if
							else
								if bit2 then
									if bit1 then
										print("\x6B") 		'107
									else
										print("\x6A") 		'106
									end if
								else
									if bit1 then
										print("\x69") 		'105
									else
										print("\x68") 		'104
									end if
								end if
							end if
						else
							if bit3 then
								if bit2 then
									if bit1 then
										print("\x67") 		'103
									else
										print("\x66") 		'102
									end if
								else
									if bit1 then
										print("\x65") 		'101
									else
										print("\x64") 		'100
									end if
								end if
							else
								if bit2 then
									if bit1 then
										print("\x63") 		' 99
									else
										print("\x62") 		' 98
									end if
								else
									if bit1 then
										print("\x61") 		' 97
									else
										print("\x60") 		' 96
									end if
								end if
							end if
						end if
					end if
				else
					if bit5 then
						if bit4 then
							if bit3 then
								if bit2 then
									if bit1 then
										print("\x5F") 		' 95
									else
										print("\x5E") 		' 94
									end if
								else
									if bit1 then
										print("\x5D") 		' 93
									else
										print("\x5C") 		' 92
									end if
								end if
							else
								if bit2 then
									if bit1 then
										print("\x5B") 		' 91
									else
										print("\x5A") 		' 90
									end if
								else
									if bit1 then
										print("\x59") 		' 89
									else
										print("\x58") 		' 88
									end if
								end if
							end if
						else
							if bit3 then
								if bit2 then
									if bit1 then
										print("\x57") 		' 87
									else
										print("\x56") 		' 86
									end if
								else
									if bit1 then
										print("\x55") 		' 85
									else
										print("\x54") 		' 84
									end if
								end if
							else
								if bit2 then
									if bit1 then
										print("\x53") 		' 83
									else
										print("\x52") 		' 82
									end if
								else
									if bit1 then
										print("\x51") 		' 81
									else
										print("\x50") 		' 80
									end if
								end if
							end if
						end if
					else
						if bit4 then
							if bit3 then
								if bit2 then
									if bit1 then
										print("\x4F") 		' 79
									else
										print("\x4E") 		' 78
									end if
								else
									if bit1 then
										print("\x4D") 		' 77
									else
										print("\x4C") 		' 76
									end if
								end if
							else
								if bit2 then
									if bit1 then
										print("\x4B") 		' 75
									else
										print("\x4A") 		' 74
									end if
								else
									if bit1 then
										print("\x49") 		' 73
									else
										print("\x48") 		' 72
									end if
								end if
							end if
						else
							if bit3 then
								if bit2 then
									if bit1 then
										print("\x47") 		' 71
									else
										print("\x46") 		' 70
									end if
								else
									if bit1 then
										print("\x45") 		' 69
									else
										print("\x44") 		' 68
									end if
								end if
							else
								if bit2 then
									if bit1 then
										print("\x43") 		' 67
									else
										print("\x42") 		' 66
									end if
								else
									if bit1 then
										print("\x41") 		' 65
									else
										print("\x40") 		' 64
									end if
								end if
							end if
						end if
					end if
				end if
			else
				if bit6 then
					if bit5 then
						if bit4 then
							if bit3 then
								if bit2 then
									if bit1 then
										print("\x3F") 		' 63
									else
										print("\x3E") 		' 62
									end if
								else
									if bit1 then
										print("\x3D") 		' 61
									else
										print("\x3C") 		' 60
									end if
								end if
							else
								if bit2 then
									if bit1 then
										print("\x3B") 		' 59
									else
										print("\x3A") 		' 58
									end if
								else
									if bit1 then
										print("\x39") 		' 57
									else
										print("\x38") 		' 56
									end if
								end if
							end if
						else
							if bit3 then
								if bit2 then
									if bit1 then
										print("\x37") 		' 55
									else
										print("\x36") 		' 54
									end if
								else
									if bit1 then
										print("\x35") 		' 53
									else
										print("\x34") 		' 52
									end if
								end if
							else
								if bit2 then
									if bit1 then
										print("\x33") 		' 51
									else
										print("\x32") 		' 50
									end if
								else
									if bit1 then
										print("\x31") 		' 49
									else
										print("\x30") 		' 48
									end if
								end if
							end if
						end if
					else
						if bit4 then
							if bit3 then
								if bit2 then
									if bit1 then
										print("\x2F") 		' 47
									else
										print("\x2E") 		' 46
									end if
								else
									if bit1 then
										print("\x2D") 		' 45
									else
										print("\x2C") 		' 44
									end if
								end if
							else
								if bit2 then
									if bit1 then
										print("\x2B") 		' 43
									else
										print("\x2A") 		' 42
									end if
								else
									if bit1 then
										print("\x29") 		' 41
									else
										print("\x28") 		' 40
									end if
								end if
							end if
						else
							if bit3 then
								if bit2 then
									if bit1 then
										print("\x27") 		' 39
									else
										print("\x26") 		' 38
									end if
								else
									if bit1 then
										print("\x25") 		' 37
									else
										print("\x24") 		' 36
									end if
								end if
							else
								if bit2 then
									if bit1 then
										print("\x23") 		' 35
									else
										print("\x22") 		' 34
									end if
								else
									if bit1 then
										print("\x21") 		' 33
									else
										print("\x20") 		' 32
									end if
								end if
							end if
						end if
					end if
				else
					if bit5 then
						if bit4 then
							if bit3 then
								if bit2 then
									if bit1 then
										print("\x1F") 		' 31
									else
										print("\x1E") 		' 30
									end if
								else
									if bit1 then
										print("\x1D") 		' 29
									else
										print("\x1C") 		' 28
									end if
								end if
							else
								if bit2 then
									if bit1 then
										print("\x1B") 		' 27
									else
										print("\x1A") 		' 26
									end if
								else
									if bit1 then
										print("\x19") 		' 25
									else
										print("\x18") 		' 24
									end if
								end if
							end if
						else
							if bit3 then
								if bit2 then
									if bit1 then
										print("\x17") 		' 23
									else
										print("\x16") 		' 22
									end if
								else
									if bit1 then
										print("\x15") 		' 21
									else
										print("\x14") 		' 20
									end if
								end if
							else
								if bit2 then
									if bit1 then
										print("\x13") 		' 19
									else
										print("\x12") 		' 18
									end if
								else
									if bit1 then
										print("\x11") 		' 17
									else
										print("\x10") 		' 16
									end if
								end if
							end if
						end if
					else
						if bit4 then
							if bit3 then
								if bit2 then
									if bit1 then
										print("\x0F") 		' 15
									else
										print("\x0E") 		' 14
									end if
								else
									if bit1 then
										print("\x0D") 		' 13
									else
										print("\x0C") 		' 12
									end if
								end if
							else
								if bit2 then
									if bit1 then
										print("\x0B") 		' 11
									else
										print("\x0A") 		' 10
									end if
								else
									if bit1 then
										print("\x09") 		'  9
									else
										print("\x08") 		'  8
									end if
								end if
							end if
						else
							if bit3 then
								if bit2 then
									if bit1 then
										print("\x07") 		'  7
									else
										print("\x06") 		'  6
									end if
								else
									if bit1 then
										print("\x05") 		'  5
									else
										print("\x04") 		'  4
									end if
								end if
							else
								if bit2 then
									if bit1 then
										print("\x03") 		'  3
									else
										print("\x02") 		'  2
									end if
								else
									if bit1 then
										print("\x01") 		'  1
									else
										'print("\x00") 		'  0
										print("\x01") 		'  null char is broken, print 1 instead
									end if
								end if
							end if
						end if
					end if
				end if
			end if
		end if
	return
		
